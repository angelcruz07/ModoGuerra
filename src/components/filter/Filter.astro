---
import { actions } from "astro:actions";
import DeleteFilter from "@icons/blog/trash.svg";

const searchParams = Astro.url.searchParams;
const currentCategory = searchParams.get("category") || "";
const currentTags = searchParams.getAll("tags") || [];

const { data: categories } = await Astro.callAction(
  actions.post.getCategories,
  {},
);
const { data: tags } = await Astro.callAction(actions.post.getTags, {});

if (!categories || !tags) {
  console.error("Error loading filter data");
}
---

<div class="flex flex-col-reverse w-full gap-4 md:flex-row">
  <div class="w-full flex-1">
    <select
      id="category"
      name="category"
      class="border-secondary cursor-pointer focus:border-secondary w-full appearance-none rounded-md border p-3 text-center text-sm text-white focus:outline-none"
    >
      <option value="">Todas las categor√≠as</option>
      {
        categories &&
          categories.map((category) => (
            <option
              value={category.id}
              selected={currentCategory === category.id}
            >
              {category.name}
            </option>
          ))
      }
    </select>
  </div>

  <div class="min-w-48 flex-1">
    <div class="relative">
      <div
        id="tagsDropdown"
        class="border-accent-hover focus:border-accent flex min-h-[48px] w-full cursor-pointer items-center justify-between rounded-md border p-3 text-white transition-colors"
      >
        <span id="tagsDisplay" class="flex-1 text-center text-sm text-white">
          Seleccionar tags...
        </span>
      </div>

      <div
        id="tagsOptions"
        class="bg-red-500 border-accent-hover absolute top-full right-0 left-0 z-50 mt-1 hidden max-h-60 overflow-y-auto rounded-md border shadow-lg backdrop-blur-sm"
      >
        {
          tags &&
            tags.map((tag) => (
              <label class="flex cursor-pointer items-center px-3 py-2 text-white transition-colors hover:bg-white/10">
                <input
                  type="checkbox"
                  value={tag}
                  class="tag-checkbox mr-2 rounded accent-red-500"
                  checked={currentTags.includes(tag)}
                />
                <span class="text-sm">{tag}</span>
              </label>
            ))
        }
      </div>
    </div>
  </div>

  <div class="flex items-end">
    <button
      type="button"
      id="clearFilters"
      class="bg-black cursor-pointer border-accent-hover focus:border-accent flex h-12 w-full items-center justify-center rounded-md border text-white transition-colors hover:border-red-400 hover:bg-red-500 focus:outline-none md:w-12"
      title="Limpiar filtros"
      aria-label="Limpiar filtros"
    >
      <DeleteFilter class="h-5 w-5" />
    </button>
  </div>
</div>

<script>
  const categorySelect = document.getElementById(
    "category",
  ) as HTMLSelectElement;
  const tagsDropdown = document.getElementById("tagsDropdown") as HTMLElement;
  const tagsOptions = document.getElementById("tagsOptions") as HTMLElement;
  const tagsDisplay = document.getElementById("tagsDisplay") as HTMLElement;
  const tagCheckboxes = document.querySelectorAll(
    ".tag-checkbox",
  ) as NodeListOf<HTMLInputElement>;
  const clearButton = document.getElementById(
    "clearFilters",
  ) as HTMLButtonElement;

  function updateTagsDisplay() {
    const selectedTags = Array.from(tagCheckboxes)
      .filter((checkbox) => checkbox.checked)
      .map((checkbox) => checkbox.value);

    if (selectedTags.length === 0) {
      tagsDisplay.textContent = "Seleccionar tags...";
      tagsDisplay.className = "flex-1 text-sm text-white text-center";
    } else if (selectedTags.length === 1) {
      tagsDisplay.textContent = selectedTags[0];
      tagsDisplay.className = "flex-1 text-sm text-white text-center";
    } else {
      tagsDisplay.textContent = `${selectedTags.length} tags seleccionados`;
      tagsDisplay.className = "flex-1 text-sm text-white text-center";
    }
  }

  function toggleDropdown() {
    const isHidden = tagsOptions.classList.contains("hidden");

    if (isHidden) {
      tagsOptions.classList.remove("hidden");
    } else {
      tagsOptions.classList.add("hidden");
    }
  }

  function closeDropdown() {
    tagsOptions.classList.add("hidden");
  }

  function updateURL() {
    const url = new URL(window.location.href);

    url.searchParams.delete("category");
    url.searchParams.delete("tags");
    url.searchParams.delete("search");
    url.searchParams.set("page", "1");

    if (categorySelect.value) {
      url.searchParams.set("category", categorySelect.value);
    }

    const selectedTags = Array.from(tagCheckboxes)
      .filter((checkbox) => checkbox.checked)
      .map((checkbox) => checkbox.value);

    selectedTags.forEach((tag) => {
      url.searchParams.append("tags", tag);
    });

    window.location.href = url.toString();
  }

  categorySelect.addEventListener("change", updateURL);

  tagsDropdown.addEventListener("click", (e) => {
    e.stopPropagation();
    toggleDropdown();
  });

  tagCheckboxes.forEach((checkbox) => {
    checkbox.addEventListener("change", (e) => {
      e.stopPropagation();
      updateTagsDisplay();
      setTimeout(updateURL, 100);
    });
  });

  document.addEventListener("click", (e) => {
    if (
      !tagsDropdown.contains(e.target as Node) &&
      !tagsOptions.contains(e.target as Node)
    ) {
      closeDropdown();
    }
  });

  tagsOptions.addEventListener("click", (e) => {
    e.stopPropagation();
  });

  clearButton.addEventListener("click", () => {
    const url = new URL(window.location.href);
    url.searchParams.delete("category");
    url.searchParams.delete("tags");
    url.searchParams.set("page", "1");
    window.location.href = url.toString();
  });

  updateTagsDisplay();
</script>
